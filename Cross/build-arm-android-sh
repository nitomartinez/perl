#!/bin/bash
# this is a build script for ARM-linux cross-compiling.
# it builds miniperl on HOST and then perl for TARGET
# this approach is like Perl-CE cross-compiling, and allows
# for full TARGET perl (as opposed to renamed miniperl)

# to skip Configure/build for HOST miniperl, pass "noconf" argument to
# this script

# note how invoked Makefile.PL for cross-compilation:
#   ./miniperl -Ilib -MCross Makefile.PL

# steps are:
# - run HOST configure
# - build HOST miniperl
# given freshly-created HOST makefile and existing miniperl fix makefile
# to use the crosscompile settings.

rm -rf android android.zip

# -- Extensions --
#
# Building fine but left out for now: attributes Devel/Peek MIME/Base64 mro PerlIO/scalar PerlIO/via Safe Storable Time/Piece
# Would be nice but do not build trivially: Time/HiRes
# Big/complex: Compress* DB_File Encode Filter/Util/Call IO/Compress Math/BigInt/FastCalc PerlIO/encoding Time/HiRes Unicode/Normalize
# Unlikely to be useful: ByteLoader GDBM_File NDBM_File Opcode SDBM_File XS/APItest XS/Typemap
# Unlikely to ever build: I18N/Langinfo IPC/SysV Sys/Syslog threads threads/shared Win32*
# Not really an ext: Attribute/Handlers

static_ext='B Cwd Data/Dumper Devel/PPPort Digest/MD5 Digest/SHA Fcntl File/Glob IO List/Util POSIX Socket Sys/Hostname Time/HiRes'

echo "[building for android]"

cd ..

cleanup () {
  echo "[cleaning up]"
  if test -f ../Configure -a -d ../Cross -a -d ../Porting
  then
     cd ..
  fi
  ### BUG, this also tries to remove files which are in the MANIFEST but don't exist on disc
  perl Porting/manicheck | awk '{print $1}' | xargs rm
}

if [[ "x$1" == xcleanup* ]] ; then
  cleanup
  exit 0
fi

agcc_test () {
  echo 'int main() { return 0; }' > tmp$$.c
  success=0
  if agcc -o tmp$$ tmp$$.c > /tmp/$$.out; then
     success=1
  else
     cat /tmp/$$.out
  fi
  rm -f tmp$$.? tmp$$
  echo $success
}

CROSS_NAME=arm
CCPREF=arm-linux-androideabi-
CROSSCC=agcc

if [[ "x$1" != xnoconf* ]] ; then
  echo "[configuring for host]"
  echo "[testing for agcc]"
  case "$(agcc_test)" in
  1) ;;
  *) echo "$0: agcc is not working right."
     echo "$0: You need to have .../prebuilt/OS-CPU/toolchain/arm-eabi-X.Y.Z/bin/arm-eabi-agcc in your PATH."
     echo "$0: Cannot continue, aborting."
     cleanup
     exit 1 ;;
  esac
  cleanup
  # Configure on HOST

  if [[ "x$1" != xmicroperl* ]] ; then
    ./Configure -des -Dprefix=./dummy -Dusedevel || exit 1
  fi
fi

# miniperl on HOST
cp -f Cross/config.sh-arm-linux-android Cross/config-${CROSS_NAME}.sh

echo "[building for host]"
if [[ "x$1" != xmicroperl* ]] ; then
  make miniperl
  MPERL=./miniperl
fi
if [[ "x$1" == xmicroperl* ]] ; then
  make -f Makefile.micro
  MPERL=./microperl
fi

if [[ "x$1" != xmicroperl* ]] ; then
  make uudmap.h
  make git_version.h
fi
if [[ "x$1" == xmicroperl* ]] ; then
#  make -f Makefile.micro uudmap.h
  make -f Makefile.micro git_version.h
fi

# Config.pm etc for target arch?
##J ./miniperl -Ilib configpm --cross=arm

# JESS: lib/re.pm, lib/lib.pm sorted elsewhere
# make lib/re.pm lib/lib.pm

# do the rest for TARGET

echo "[setting up for target]"

HOST_PATH=$PWD
mkdir xcompile
cd xcompile
echo "running: $HOST_PATH/Configure -Dmksymlinks -des -Dusedevel"
$HOST_PATH/Configure -Dmksymlinks -des -Dusedevel

## Need to repeat this copy in the xcompile dir
cp -f Cross/config.sh-arm-linux-android Cross/config-${CROSS_NAME}.sh
cp -f $HOST_PATH/lib/Config_git.pl ./lib
${HOST_PATH}/${MPERL} -Ilib configpm --cross=arm

cp -f $HOST_PATH/git_version.h .
cp -f $HOST_PATH/uudmap.h .
cp -f $HOST_PATH/bitcount.h .
cp -f $HOST_PATH/mg_data.h .
cp -f $HOST_PATH/utils.lst .

ln -s $HOST_PATH/${MPERL} .

echo "[building for target]"

export CROSSCC
export CROSS_NAME
export HOST_PATH 

$CROSSCC --version

# call make thusly so it will crosscompile...
XCOREDIR=xlib/$CROSS_NAME/CORE
PERL_CONFIG_SH=Cross/config-${CROSS_NAME}.sh

cp -f $PERL_CONFIG_SH config.sh
## JESS: Remove some old junk no longer present in 5.15
# for sh in config_h Makefile Policy_sh cflags makeaperl makedepend makedir myconfig writemain
for sh in config_h Makefile Policy_sh cflags makedepend myconfig
do
  sh $sh.SH
done

# make cflags do cross-compile work (now its hackish, will be improved!)
rm -f cflags-cross-$CROSS_NAME
cp Cross/cflags-cross-$CROSS_NAME .
rm -f Makefile-cross-$CROSS_NAME
# CROSS_NAME=$CROSS_NAME sh Makefile.SH
CROSS_NAME=$CROSS_NAME sh Cross/Makefile-cross-SH
cp -f Cross/Makefile-cross-$CROSS_NAME .
cp -f Makefile-cross-$CROSS_NAME makefile

mkdir -p ${XCOREDIR}

cp -f *.h xlib/$CROSS_NAME

mv -f Makefile Makefile.host
rm -f GNUmakefile
rm -f *.o

# touch xlib/$CROSS_NAME/Config.pm

AR=${CCPREF}ar

MAKEFILE=Makefile-cross-$CROSS_NAME
make -f ${MAKEFILE} xconfig.h || exit 1
make -f ${MAKEFILE} libperl.so OBJ_EXT=.o LIB_EXT=.a AR=${AR} || exit 1


echo "[building perl.${CROSS_NAME}]"
make -f ${MAKEFILE} perl.${CROSS_NAME} MAKEFILE=${MAKEFILE} OBJ_EXT=.o LIB_EXT=.a AR=${AR} LIBPERL=libperl.so || exit 1

echo "[building utilities]"
make -f ${MAKEFILE} utilities MAKEFILE=${MAKEFILE} PERL="${HOST_PATH}/${MPERL} -MCross" || exit 1

echo

ls -l perl

cd x2p
make depend PERL="${HOST_PATH}/${MPERL} -MCross" CC=agcc LDFLAGS= libs="-ldl -lc -lm"
make all PERL="${HOST_PATH}/${MPERL} -MCross" CC=agcc LDFLAGS= libs="-ldl -lc -lm"

echo
echo "[android build done]"
echo
echo "[next you can try running package-android-sh]"
echo
